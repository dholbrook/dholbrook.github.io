<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mostly Blather]]></title>
  <link href="http://mostlyblather.com/atom.xml" rel="self"/>
  <link href="http://mostlyblather.com/"/>
  <updated>2015-05-24T16:37:41-07:00</updated>
  <id>http://mostlyblather.com/</id>
  <author>
    <name><![CDATA[David Holbrook]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mermaid Octopress Integration]]></title>
    <link href="http://mostlyblather.com/blog/2015/05/23/mermaid-jekyll-octopress/"/>
    <updated>2015-05-23T12:00:00-07:00</updated>
    <id>http://mostlyblather.com/blog/2015/05/23/mermaid-jekyll-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://knsv.github.io/mermaid/">Mermaid</a> provides &#8220;generation of diagrams and flowcharts from text in a similar manner as markdown&#8221;.  I wanted to add charting support to the blog (running on <a href="http://octopress.org/">Octopress</a>), these are the steps I took to get things working.</p>

<h3>download</h3>

<p>The best place I found to download mermaid is the <a href="https://github.com/knsv/mermaid/tree/master/dist">dist folder</a> of the mermaid github repo.</p>

<ul>
<li><code>mermaid.full.min.js</code> to <code>/source/javascripts/mermaid.full.min.js</code></li>
<li><code>mermaid.css</code> to <code>/source/stylesheets/mermaid.css</code></li>
</ul>


<h3>integrate</h3>

<p>I found the (jekyll-mermaid)[<a href="https://github.com/jasonbellamy/jekyll-mermaid">https://github.com/jasonbellamy/jekyll-mermaid</a>] plugin and installed it.</p>

<p>In addition to the instructions on the plugin page I had to mannuall add an entry into the Gemfile for rake to pick it up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rake&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 10.0&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;jekyll&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0&#39;</span>
</span><span class='line'>  <span class="c1"># ...snip</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;jekyll-mermaid&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.0.0&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>problems encountered</h3>

<ul>
<li>double dash requires escape (rdiscount related problem)

<ul>
<li>This works <code>A\-\-&gt;B</code></li>
<li>This will not work <code>A--&gt;B</code></li>
</ul>
</li>
</ul>


<h3>test diagrams</h3>

<pre>
{% mermaid %}
graph LR;
    A\-\->B;
{% endmermaid %}
</pre>




<script src="http://mostlyblather.com/javascripts/mermaid.full.min.js"></script>


<div class="mermaid">
graph LR;
    A&#45;&#45;>B;
</div>




<pre>
{% mermaid %}
graph TD;
    A\-\->B;
    A\-\->C;
    B\-\->D;
    C\-\->D;
{% endmermaid %}
</pre>




<script src="http://mostlyblather.com/javascripts/mermaid.full.min.js"></script>


<div class="mermaid">
graph TD;
    A&#45;&#45;>B;
    A&#45;&#45;>C;
    B&#45;&#45;>D;
    C&#45;&#45;>D;
</div>




<pre>
{% mermaid %}
sequenceDiagram
    Alice->>John: Hello John, how are you?
    John\-->>Alice: Great!
{% endmermaid %}
</pre>




<script src="http://mostlyblather.com/javascripts/mermaid.full.min.js"></script>


<div class="mermaid">
sequenceDiagram
    Alice->>John: Hello John, how are you?
    John&#45;->>Alice: Great!
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Password Hash]]></title>
    <link href="http://mostlyblather.com/blog/2014/01/03/scala-password-hash/"/>
    <updated>2014-01-03T13:39:19-08:00</updated>
    <id>http://mostlyblather.com/blog/2014/01/03/scala-password-hash</id>
    <content type="html"><![CDATA[<p>I&#8217;m working on a spray framework REST based tech demo project, and I want to securely store passwords as salted hashes in a database.  I took a look around at existing projects, and couldn&#8217;t find quite what I was looking for.</p>

<ul>
<li>simple to use and understand</li>
<li>based on JVM built in crypto libraries</li>
<li>written in Scala</li>
</ul>


<p>The closest thing I found was this: <a href="https://crackstation.net/hashing-security.htm#javasourcecode">Java PBKDF2 Password Hashing Code</a></p>

<p>But it is written in Java&#8230;. So I took a crack at porting it to Scala.</p>

<p>It lives here on github:</p>

<p><a href="https://github.com/dholbrook/scala-password-hash">https://github.com/dholbrook/scala-password-hash</a></p>

<p>The public methods <code>createHash()</code> and <code>validatePassword()</code> are for the most part the same as the Java version.  Some of the private methods are quite a bit different.</p>

<h3>slowEquals</h3>

<p>This is an interesting method in the Java implementation.  It is designed to always take the same amount of time to determine equality regardless of the length of the arrays being compared. Additionally it uses the XOR operator <code>^</code> to produce consistent branching.  I suspect using XOR in Java this way is somewhat controversial, regardless I used a similar approach in my Scala implementation.</p>

<figure class='code'><figcaption><span>Java: slowEquals()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">slowEquals</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">^</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>        <span class="n">diff</span> <span class="o">|=</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">^</span> <span class="n">b</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">diff</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The most significant change in the Scala port is making <code>diff</code> immutable.  The same result is achieved by folding over a range, and using an accumulator seeded by the initial test of <code>a.length ^ b.length</code>.</p>

<figure class='code'><figcaption><span>Scala: slowEquals()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">private</span> <span class="k">def</span> <span class="n">slowEquals</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">],</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">])</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">range</span> <span class="k">=</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">scala</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="n">min</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="n">length</span><span class="o">,</span> <span class="n">b</span><span class="o">.</span><span class="n">length</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">diff</span> <span class="k">=</span> <span class="n">range</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="n">length</span> <span class="o">^</span> <span class="n">b</span><span class="o">.</span><span class="n">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="o">(</span><span class="n">acc</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">acc</span> <span class="o">|</span> <span class="n">a</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">^</span> <span class="n">b</span><span class="o">(</span><span class="n">i</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">diff</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>fromHex / toHex</h3>

<p>The utility functions <code>fromHex</code> and <code>toHex</code> saw a big size reduction.</p>

<figure class='code'><figcaption><span>Java: fromHex() and toHex()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">fromHex</span><span class="o">(</span><span class="n">String</span> <span class="n">hex</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">binary</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">hex</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="o">];</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">binary</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">binary</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">hex</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="o">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">),</span> <span class="mi">16</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">binary</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toHex</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">array</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">BigInteger</span> <span class="n">bi</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BigInteger</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">array</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">hex</span> <span class="o">=</span> <span class="n">bi</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="mi">16</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">paddingLength</span> <span class="o">=</span> <span class="o">(</span><span class="n">array</span><span class="o">.</span><span class="na">length</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span> <span class="o">-</span> <span class="n">hex</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">paddingLength</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%0&quot;</span> <span class="o">+</span> <span class="n">paddingLength</span> <span class="o">+</span> <span class="s">&quot;d&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="n">hex</span><span class="o">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">hex</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Scala: fromHex() and toHex()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">private</span> <span class="k">def</span> <span class="n">fromHex</span><span class="o">(</span><span class="n">hex</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">hex</span><span class="o">.</span><span class="n">sliding</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">).</span><span class="n">toArray</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="n">parseInt</span><span class="o">(</span><span class="k">_</span><span class="o">,</span> <span class="mi">16</span><span class="o">).</span><span class="n">toByte</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">def</span> <span class="n">toHex</span><span class="o">(</span><span class="n">bytes</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">])</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">bytes</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="s">&quot;%02X&quot;</span> <span class="n">format</span> <span class="k">_</span><span class="o">).</span><span class="n">mkString</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Testing</h3>

<p>I tested the code by using it in conjunction with the existing Java implementation.  Verifying that passwords created by each side were interoperable with the other.  I used <a href="http://www.scalacheck.org/">ScalaCheck</a> to randomly generate a set of passwords to test.</p>

<figure class='code'><figcaption><span>PasswordHashTest</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">scalapasswordhash</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalacheck.Gen</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalacheck.Gen._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalatest.FunSuite</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalatest.prop.GeneratorDrivenPropertyChecks</span>
</span><span class='line'><span class="k">import</span> <span class="nn">passwordhash.</span><span class="o">{</span><span class="nc">PasswordHash</span> <span class="k">=&gt;</span> <span class="nc">JPasswordHash</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PasswordHashTest</span> <span class="k">extends</span> <span class="nc">FunSuite</span> <span class="k">with</span> <span class="nc">GeneratorDrivenPropertyChecks</span>  <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span><span class="o">(</span><span class="s">&quot;hash generated from Java should validate with Scala&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">forAll</span> <span class="o">(</span><span class="n">identifier</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">password</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">h1</span> <span class="k">=</span> <span class="nc">JPasswordHash</span><span class="o">.</span><span class="n">createHash</span><span class="o">(</span><span class="n">password</span><span class="o">)</span>
</span><span class='line'>      <span class="n">assert</span><span class="o">(</span><span class="nc">PasswordHash</span><span class="o">.</span><span class="n">validatePassword</span><span class="o">(</span><span class="n">password</span><span class="o">,</span> <span class="n">h1</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">test</span><span class="o">(</span><span class="s">&quot;hash generated from Scala should validate with Java&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">forAll</span> <span class="o">(</span><span class="n">identifier</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">password</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">h1</span> <span class="k">=</span> <span class="nc">PasswordHash</span><span class="o">.</span><span class="n">createHash</span><span class="o">(</span><span class="n">password</span><span class="o">)</span>
</span><span class='line'>      <span class="n">assert</span><span class="o">(</span><span class="nc">JPasswordHash</span><span class="o">.</span><span class="n">validatePassword</span><span class="o">(</span><span class="n">password</span><span class="o">,</span> <span class="n">h1</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Migration Recap]]></title>
    <link href="http://mostlyblather.com/blog/2014/01/03/blog-migration-recap/"/>
    <updated>2014-01-03T12:05:22-08:00</updated>
    <id>http://mostlyblather.com/blog/2014/01/03/blog-migration-recap</id>
    <content type="html"><![CDATA[<p>The conversion from Blogger to <a href="http://octopress.org/">Octopress</a>/<a href="http://jekyllrb.com/">Jekyll</a> went a lot smoother than I expected it to.  The DNS now seems to be working correctly, I&#8217;ve updated Google Analytics to use the new site, and I added some redirect pages that match the old site so searches can still find the old content.</p>

<p>I still have a few things I want to do.</p>

<ul>
<li>Change the default Octopress favicon.</li>
<li>Add a top categories sidebar</li>
<li>Categorize old articles</li>
</ul>


<p>As an aside, I&#8217;m really enjoying using Markdown to author blog posts.  I&#8217;m using <a href="http://markdownpad.com/">MakrdownPad 2</a> on Windows and it is very slick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Moving to Github]]></title>
    <link href="http://mostlyblather.com/blog/2013/12/31/blog-moving-to-github/"/>
    <updated>2013-12-31T14:04:31-08:00</updated>
    <id>http://mostlyblather.com/blog/2013/12/31/blog-moving-to-github</id>
    <content type="html"><![CDATA[<p>Mostly Blather is moving from <a href="http://www.blogger.com/">Bloger</a> to  <a href="http://pages.github.com/">Github Pages</a>.</p>

<p>I am using <a href="http://octopress.org/">Octopress</a> with the <a href="http://kaworu.github.io/octopress/">Octostrap3</a> theme.  I imported the old blogger site with <a href="http://import.jekyllrb.com/">jekyll-import</a>.</p>

<p>Some of the formatting of the old site has been lost, and there seems to be no good way of bringing the comments over.  Expect my next post to be about how it all worked out.</p>

<p>Note: The old site is still available <a href="http://mostlyblather.blogspot.com">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grails and DBUnit Integration Testing]]></title>
    <link href="http://mostlyblather.com/blog/2010/05/02/grails-and-dbunit-integration-testing/"/>
    <updated>2010-05-02T00:00:00-07:00</updated>
    <id>http://mostlyblather.com/blog/2010/05/02/grails-and-dbunit-integration-testing</id>
    <content type="html"><![CDATA[<p>I need to do a bit of integration testing with Grails and both of the <a href="http://www.dbunit.org/">DBUnit</a> plugins I found didn’t seem to be maintained.&#160; To create a simple base class for DBUnit based integration tests turned out to be relatively simple to create.</p>  <p>For the purposes of this sample I created a grails project called bookstore with a single domain class called Book in the bookstore package.&#160; This is what book domain class looks like:</p>  <pre class="brush: groovy">package bookstore<br /><br />class Book {<br />    String title<br />    String author<br />}</pre><br /><br /><p>First I had to add the DBUnit dependency to /grails-app/conf/BuildConfig.groovy and also enable the maven central repository.&#160; This is what the grails.project.dependency.resolution section now looks like:</p><br /><br /><pre class="brush: groovy">grails.project.dependency.resolution = {<br />    inherits( &quot;global&quot; ) {<br />    }<br />    log &quot;warn&quot;<br />    repositories {        <br />        grailsPlugins()<br />        grailsHome()<br />        mavenCentral()<br />    }<br />    dependencies {<br />     test 'org.dbunit:dbunit:2.4.7'<br />    }<br />}</pre><br /><br /><p>Next I created a base class for my DBUnit based tests.&#160; I created a class named DbunitGroovyTestCase in /test/integration/bookstore.&#160; The DataSource property named dataSource is injected from the Spring container when the integration tests are run, and I used the DatabaseDataSourceConnection class to create the DBUnit connection.</p><br /><br /><pre class="brush: groovy">package bookstore<br /><br />import javax.sql.DataSource;<br /><br />import org.dbunit.database.DatabaseDataSourceConnection;<br />import org.dbunit.database.IDatabaseConnection;<br />import org.dbunit.dataset.xml.FlatXmlDataSetBuilder<br />import org.dbunit.dataset.xml.FlatXmlDataSet<br />import org.dbunit.dataset.IDataSet<br />import org.dbunit.operation.DatabaseOperation;<br /><br />import groovy.util.GroovyTestCase;<br /><br />class DbunitGroovyTestCase extends GroovyTestCase {<br /><br />    DataSource dataSource<br />    IDatabaseConnection connection<br /><br />    protected void setUp() {<br />        connection = new DatabaseDataSourceConnection(dataSource)<br />        DatabaseOperation.CLEAN_INSERT.execute(connection, dataSet)<br />    }<br /><br />    protected void tearDown(){<br />        connection.close()<br />    }<br /><br />    protected IDataSet getDataSet() {<br />        return new FlatXmlDataSetBuilder().build(new FileInputStream(&quot;test/dbunit/dataset.xml&quot;));<br />    }<br /><br />}</pre><br /><br /><p>Here is a sample data set I created for the book table, located in test/dbunit/dataset.xml:</p><br /><br /><pre class="brush: xml">&lt;dataset&gt;<br />    &lt;book id=&quot;1&quot; version=&quot;1&quot; author=&quot;Mark Twain&quot; title=&quot;The Adventures of Tom Sawyer&quot;/&gt;<br />    &lt;book id=&quot;2&quot; version=&quot;1&quot; author=&quot;Mark Twain&quot; title=&quot;The Prince and the Pauper&quot;/&gt;<br />    &lt;book id=&quot;3&quot; version=&quot;1&quot; author=&quot;Mark Twain&quot; title=&quot;Adventures of Huckleberry Finn&quot;/&gt;<br />    &lt;book id=&quot;4&quot; version=&quot;1&quot; author=&quot;Mark Twain&quot; title=&quot;A Connecticut Yankee in King Arthur's Court&quot;/&gt;<br />&lt;/dataset&gt;</pre><br /><br /><p>Finally here is a sample integration test, located in test/integration/bookstore/BookPersistenceTest.groovy</p><br /><br /><pre class="brush: groovy">package bookstore;<br /><br />import grails.test.*<br /><br />class BookPersistenceTest extends DbunitGroovyTestCase  {<br /><br />    public void testFindAllByAuthor() throws Exception {<br />        def books = Book.findAllByAuthor(&quot;Mark Twain&quot;)<br />        assertEquals(4,books.size)<br />    }<br /><br />    public void testFindByTitle() throws Exception {<br />        def book = Book.findByTitle(&quot;Adventures of Huckleberry Finn&quot;)<br />        assertEquals(&quot;Mark Twain&quot;,book.author)<br />    }<br /><br />}</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala With Querulous vs. Java With Spring JdbcTemplate]]></title>
    <link href="http://mostlyblather.com/blog/2010/04/04/scala-with-querulous-vs.-java-with-spring-jdbctemplate/"/>
    <updated>2010-04-04T00:00:00-07:00</updated>
    <id>http://mostlyblather.com/blog/2010/04/04/scala-with-querulous-vs.-java-with-spring-jdbctemplate</id>
    <content type="html"><![CDATA[<p>While (<a href="http://www.mostlyblather.com/2010/03/scala-external-dsl-and-combinator.html">still</a>) looking around for a Scala SQL equivalent of iBatis, I found <a href="http://stackoverflow.com/questions/1362748/wanted-good-examples-of-scala-database-persistence">this post</a> on stackoverflow.&#160; Daniel’s answer let me to <a href="http://github.com/nkallen/querulous#readme">Querulous</a>.&#160; Several years ago I used the Spring Framework JdbcTemplate and it worked fine, but it was kind of clunky.&#160; That experience with JdbcTemplate led directly to using iBatis on that very same project.&#160; I have been mostly working with Hibernate/JPA since then, but for a certain class of problems, a SQL centric solution seems a better fit that a full blown ORM.</p>  <p>After looking at Querulous, and seeing how it manages to de-clutter the anonymous inner class clunkyness that is JdbcTemplate I’m left wondering if this isn’t the way I should go.</p>  <p>Here is a quick example from the <a href="http://static.springsource.org/spring/docs/2.5.x/reference/jdbc.html#jdbc-JdbcTemplate">JdbcTemplate</a> documentation in Java:</p>  <pre class="brush: java">Collection actors = this.jdbcTemplate.query(<br />    &quot;select first_name, surname from t_actor&quot;,<br />    new RowMapper() {<br /><br />        public Object mapRow(ResultSet rs, int rowNum) throws SQLException {<br />            Actor actor = new Actor();<br />            actor.setFirstName(rs.getString(&quot;first_name&quot;));<br />            actor.setSurname(rs.getString(&quot;surname&quot;));<br />            return actor;<br />        }<br />    });</pre><br /><br /><p>Here is the equivalent with Querulous in Scala:</p><br /><br /><pre class="brush: scala">  val actors = queryEvaluator.select(&quot;select first_name, surname from t_actor&quot;) { row =&gt;<br />    new Actor(row.getString(&quot;first_name&quot;), row.getString(&quot;surname&quot;))<br />  }</pre><br /><br /><p>Simple and easy to understand.&#160; Can’t beat that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala External DSL and Combinator Parsing Experimentation]]></title>
    <link href="http://mostlyblather.com/blog/2010/03/21/scala-external-dsl-and-combinator-parsing-experimentation/"/>
    <updated>2010-03-21T00:00:00-07:00</updated>
    <id>http://mostlyblather.com/blog/2010/03/21/scala-external-dsl-and-combinator-parsing-experimentation</id>
    <content type="html"><![CDATA[<p>Yesterday I was looking around on the inter-webs for a Scala project that was “<a href="http://ibatis.apache.org/">iBatis</a>” like, but more Scala oriented.&#160; I found some cool stuff (<a href="http://www.sts.tu-harburg.de/people/mi.garcia/ScalaQL/">ScalaQL</a>, and <a href="http://github.com/p3t0r/scala-sql-dsl">scala-sql-dsl</a> for example) but nothing quite what I was looking for.</p>  <p>I kind of chewed on what exactly it was that I was looking for and this is my 10k/foot feature list:</p>  <ul>   <li>Ability to define the underlying data store in a DSL that can be understood by Scala </li>    <li>Ability to map Scala classes to JDBC results by binding to artifacts of the data store </li> </ul>  <p>This is more or less what iBatis accomplishes with xml (now annotations) and a bunch of reflection.&#160; I’d like to see it done without XML and minimal reflection.</p>  <p>That sent me down the rabbit hole on how exactly one goes about defining a DSL in scala.&#160; I re-read chapter 31 in <a href="http://www.artima.com/shop/programming_in_scala">Programming in Scala</a>.&#160; I also read chapter 11 in <a href="http://programming-scala.labs.oreilly.com/ch11.html">Programming Scala</a>.&#160; Then I took a stab at writing a parser combinator for a very, very small subset of the “CREATE TABLE” DDL syntax for SQL.</p>  <pre class="brush: scala">import scala.util.parsing.combinator._<br /><br />class TableDdlParser extends JavaTokenParsers {<br />  <br />  def tables: Parser[Map[String, Any]] = rep(table) ^^ { Map() ++ _ }<br />  <br />  def table: Parser[(String,Any)] = <br />    (&quot;TABLE&quot; ~ tableName ~ columns <br />       ^^ { case &quot;TABLE&quot; ~ tableName ~ tableContents =&gt; (tableName,tableContents) })<br />  <br />  def tableName: Parser[String] = ident ^^ { case ident =&gt; ident }<br />  <br />  def columns: Parser[Map[String, Any]] = &quot;(&quot;~&gt; repsep(column, &quot;,&quot;) &lt;~&quot;)&quot; ^^ { Map() ++ _ }<br />  <br />  def column: Parser[(String,Any)] = <br />    columnName ~ dataType ^^ { case columnName ~ dataType =&gt; (columnName,dataType) }<br />    <br />  def columnName: Parser[String] = ident ^^ { case ident =&gt; ident }<br />  <br />  def dataType: Parser[Any] = &quot;VARCHAR&quot; | &quot;INTEGER&quot;<br />  <br />}<br /><br />object TableDdlParserRunner extends TableDdlParser {<br />  <br />  def main(args: Array[String]) {<br />    val input = <br />      &quot;&quot;&quot;TABLE person (first_name VARCHAR, last_name VARCHAR, age INTEGER)<br />         TABLE place (city VARCHAR, state VARCHAR)&quot;&quot;&quot;<br />    println(parseAll(tables,input))<br />  }<br /> <br />}</pre><br /><br /><p>Here is the output</p><br /><br /><pre class="brush: text">[2.51] parsed: <br />Map(person -&gt; Map(first_name -&gt; VARCHAR, <br />                  last_name -&gt; VARCHAR, <br />                  age -&gt; INTEGER), <br />    place -&gt; Map(city -&gt; VARCHAR, <br />                 state -&gt; VARCHAR))</pre><br /><br /><p>This experiment only supports two data types (VARCHAR and INTEGER), without any of the other metadata that is required for those types.&#160; I just wanted a feel for how hard it would be to write and didn’t want to get bogged down in the details.&#160; It turned out to be quite a bit easier than I thought it would be. </p><br /><br /><p>Next up is to figure out the best way to map this DDL information to a scala class (If I don’t get distracted by something else first).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save TortoiseHg Remote Repository Credentials]]></title>
    <link href="http://mostlyblather.com/blog/2010/03/17/save-tortoisehg-remote-repository-credentials/"/>
    <updated>2010-03-17T00:00:00-07:00</updated>
    <id>http://mostlyblather.com/blog/2010/03/17/save-tortoisehg-remote-repository-credentials</id>
    <content type="html"><![CDATA[<p>A quick tip so you don’t have to re-enter your user name and password every time you pull or push from a remote Mercurial repository when using TortoiseHg.</p>  <p>Right click in the folder explorer and select TortoiseHg –&gt; Repository Settings.</p>  <p><a href="http://lh4.ggpht.com/_73YtsrpL_Mo/S6GaT3FzgiI/AAAAAAAAAVc/9kNI0tsw5eU/s1600-h/repository_settings%5B7%5D.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="repository_settings" border="0" alt="repository_settings" src="http://lh4.ggpht.com/_73YtsrpL_Mo/S6GaUrawbNI/AAAAAAAAAVg/qSTIN2ERPpM/repository_settings_thumb%5B5%5D.png?imgmax=800" width="379" height="466" /></a></p>  <p>Select the “Sync” tab in the “TortoiseHg Configure Repository” window.&#160; Either select the desired Remote repository path and click “Edit” or create a new Remote repository path with the “Add” button.</p>  <p><a href="http://lh3.ggpht.com/_73YtsrpL_Mo/S6GaUypeH8I/AAAAAAAAAVk/W26RvueLLmk/s1600-h/sync%5B5%5D.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="sync" border="0" alt="sync" src="http://lh6.ggpht.com/_73YtsrpL_Mo/S6GaVTsfRTI/AAAAAAAAAVo/NwxP-jVXcu0/sync_thumb%5B3%5D.png?imgmax=800" width="393" height="379" /></a> </p>  <p>That will bring up the “Edit remote repository path” dialog.&#160; Enter your User and Password, then click OK.</p>  <p>&#160;</p>  <p><a href="http://lh6.ggpht.com/_73YtsrpL_Mo/S6GaV5sVg8I/AAAAAAAAAVs/qZ1NGDwB9sI/s1600-h/edit%5B5%5D.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="edit" border="0" alt="edit" src="http://lh5.ggpht.com/_73YtsrpL_Mo/S6GaWSxevcI/AAAAAAAAAVw/fGLT4T0lU_I/edit_thumb%5B3%5D.png?imgmax=800" width="374" height="232" /></a> </p>  <p>Finally click the “Apply” button on the “TortoiseHg Configure Repository” window.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala With RESTEasy (JAX-RS)]]></title>
    <link href="http://mostlyblather.com/blog/2010/02/28/scala-with-resteasy-(jax-rs)/"/>
    <updated>2010-02-28T00:00:00-08:00</updated>
    <id>http://mostlyblather.com/blog/2010/02/28/scala-with-resteasy-(jax-rs)</id>
    <content type="html"><![CDATA[<p>In the <a href="http://johnnycoder.com/blog/2010/01/06/how-to-organize-a-programming-language-club/">&quot;code club&quot; / &quot;dojo&quot;</a> or whatever you want to call it that Ben (aka <a href="http://johnnycoder.com/blog/">Johnny Coder</a>) organized we have been learning about Scala the last few weeks. I have been puttering with <a href="http://www.scala-lang.org/">Scala</a> on my own for about a year now, and it has been fun to engage with other folk in the learning process. We have mostly been doing a mix of <a href="http://projecteuler.net/">Project Euler</a> and the <a href="http://aperiodic.net/phil/scala/s-99/">S-99</a> problems as exercises. Those problems are fun, but they don&#8217;t really reflect the kind of day to day programming tasks that I am usually engaged in. </p>  <p>To scratch that slightly more practical itch, I decided to see how well Scala fits in with other tools in the Java ecosystem. The Java ecosystem being broad, and my Scala kung fu being not that strong, all I have are some possibly interesting bits I discovered while trying to get Scala and <a href="http://www.jboss.org/resteasy">RESTEasy</a> working together.&#160; I picked RESTEasy because in the middle of reading <a href="http://oreilly.com/catalog/9780596158040/">RESTful Java with JAX-RS</a>.</p>  <p>I started off with an <a href="https://resteasy.svn.sourceforge.net/svnroot/resteasy/tags/RESTEASY_JAXRS_1_2_GA/examples/oreilly-workbook/ex11_2/">existing</a> example project from chapter 11 in the RESTEasy book. I added the <a href="http://scala-tools.org/mvnsites/maven-scala-plugin/">Scala plugin</a> to the maven build, and I was off. </p>  <p>The first class I converted over was a JAXB annotated class <a href="https://resteasy.svn.sourceforge.net/svnroot/resteasy/tags/RESTEASY_JAXRS_1_2_GA/examples/oreilly-workbook/ex11_2/src/main/java/com/restfully/shop/domain/Customer.java">com.restfully.shop.domain.Customer</a></p>  <p>I ran into a few things that caused me problems.&#160; The first was this compiler message:</p>  <pre class="brush: text">&quot;';' expected but ',' found&quot;</pre><br /><br /><p>At the @XMLType annotation line.&#160; The resolution was to switch from using the Array literal &quot;{}&quot; Java syntax to the Scala Array object.</p><br /><br /><p>I also got a JAXB runtime error during the JUnit tests:</p><br /><br /><pre class="brush: text">....<br />Caused by: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 15 counts of IllegalAnnotationExceptions<br />There are two properties named ....</pre><br /><br /><p>I resolved that by using the @XmlAccessorType(XmlAccessType.FIELD) annotation.</p><br /><br /><p>For compatibility with the existing code that expected Java Bean style property access, I added the @BeanProperty annotation.&#160;&#160; The annotation causes Scala to automatically generate get/set methods. </p><br /><br /><p>Here is the java version of Customer:</p><br /><br /><pre class="brush: java">package com.restfully.shop.domain;<br /><br />import javax.xml.bind.annotation.XmlAttribute;<br />import javax.xml.bind.annotation.XmlElement;<br />import javax.xml.bind.annotation.XmlRootElement;<br />import javax.xml.bind.annotation.XmlType;<br /><br />@XmlRootElement(name = &quot;customer&quot;)<br />@XmlType(propOrder = {&quot;firstName&quot;, &quot;lastName&quot;, &quot;street&quot;, &quot;city&quot;, &quot;state&quot;, &quot;zip&quot;, &quot;country&quot;})<br />public class Customer<br />{<br />   private int id;<br />   private String firstName;<br />   private String lastName;<br />   private String street;<br />   private String city;<br />   private String state;<br />   private String zip;<br />   private String country;<br /><br />   @XmlAttribute<br />   public int getId()<br />   {<br />      return id;<br />   }<br /><br />   public void setId(int id)<br />   {<br />      this.id = id;<br />   }<br /><br />   @XmlElement(name = &quot;first-name&quot;)<br />   public String getFirstName()<br />   {<br />      return firstName;<br />   }<br /><br />   public void setFirstName(String firstName)<br />   {<br />      this.firstName = firstName;<br />   }<br /><br />   @XmlElement(name = &quot;last-name&quot;)<br />   public String getLastName()<br />   {<br />      return lastName;<br />   }<br /><br />   public void setLastName(String lastName)<br />   {<br />      this.lastName = lastName;<br />   }<br /><br />   @XmlElement<br />   public String getStreet()<br />   {<br />      return street;<br />   }<br /><br />   public void setStreet(String street)<br />   {<br />      this.street = street;<br />   }<br /><br />   @XmlElement<br />   public String getCity()<br />   {<br />      return city;<br />   }<br /><br />   public void setCity(String city)<br />   {<br />      this.city = city;<br />   }<br /><br />   @XmlElement<br />   public String getState()<br />   {<br />      return state;<br />   }<br /><br />   public void setState(String state)<br />   {<br />      this.state = state;<br />   }<br /><br />   @XmlElement<br />   public String getZip()<br />   {<br />      return zip;<br />   }<br /><br />   public void setZip(String zip)<br />   {<br />      this.zip = zip;<br />   }<br /><br />   @XmlElement<br />   public String getCountry()<br />   {<br />      return country;<br />   }<br /><br />   public void setCountry(String country)<br />   {<br />      this.country = country;<br />   }<br /><br />   @Override<br />   public String toString()<br />   {<br />      return &quot;Customer{&quot; +<br />              &quot;id=&quot; + id +<br />              &quot;, firstName='&quot; + firstName + '\'' +<br />              &quot;, lastName='&quot; + lastName + '\'' +<br />              &quot;, street='&quot; + street + '\'' +<br />              &quot;, city='&quot; + city + '\'' +<br />              &quot;, state='&quot; + state + '\'' +<br />              &quot;, zip='&quot; + zip + '\'' +<br />              &quot;, country='&quot; + country + '\'' +<br />              '}';<br />   }<br />}</pre><br /><br /><p>Here is my Scala conversion of Customer:</p><br /><br /><pre class="brush: scala">package com.restfully.shop.domain<br /><br />import javax.xml.bind.annotation.XmlAttribute<br />import javax.xml.bind.annotation.XmlElement<br />import javax.xml.bind.annotation.XmlRootElement<br />import javax.xml.bind.annotation.XmlType<br />import javax.xml.bind.annotation.XmlAccessorType<br />import javax.xml.bind.annotation.XmlAccessType<br /><br />import scala.reflect.BeanProperty<br /><br />@XmlRootElement(name = &quot;customer&quot;)<br />@XmlType(propOrder = Array(&quot;firstName&quot;, &quot;lastName&quot;, &quot;street&quot;, &quot;city&quot;, &quot;state&quot;, &quot;zip&quot;, &quot;country&quot;))<br />@XmlAccessorType(XmlAccessType.FIELD)<br />class Customer {<br /><br />   @XmlAttribute<br />   @BeanProperty<br />   var id: Int = _<br />   <br />   @XmlElement(name = &quot;first-name&quot;)<br />   @BeanProperty<br />   var firstName: String = _<br />   <br />   @XmlElement(name = &quot;last-name&quot;)<br />   @BeanProperty<br />   var lastName: String = _<br />   <br />   @XmlElement<br />   @BeanProperty<br />   var street: String = _<br />   <br />   @XmlElement<br />   @BeanProperty<br />   var city: String = _<br />   <br />   @XmlElement<br />   @BeanProperty<br />   var state: String = _<br />   <br />   @XmlElement<br />   @BeanProperty<br />   var zip: String = _<br /><br />   @XmlElement<br />   @BeanProperty<br />   var country: String = _<br /><br />   override def toString = <br />    &quot;Customer{&quot; +<br />    &quot;id=&quot; + id +<br />    &quot;, firstName='&quot; + firstName + '\'' +<br />    &quot;, lastName='&quot; + lastName + '\'' +<br />    &quot;, street='&quot; + street + '\'' +<br />    &quot;, city='&quot; + city + '\'' +<br />    &quot;, state='&quot; + state + '\'' +<br />    &quot;, zip='&quot; + zip + '\'' +<br />    &quot;, country='&quot; + country + '\'' +<br />    '}'<br />   <br />}</pre><br /><br /><p>The next class I converted was <a href="https://resteasy.svn.sourceforge.net/svnroot/resteasy/tags/RESTEASY_JAXRS_1_2_GA/examples/oreilly-workbook/ex11_2/src/main/java/com/restfully/shop/domain/Customers.java">com.restfully.shop.domain.Customers</a></p><br /><br /><p>This conversion was very similar, but it was dealing with collections.&#160; I found that Scala 2.8 has a new object <a href="http://www.scala-lang.org/archives/downloads/distrib/files/nightly/docs/library/scala/collection/JavaConversions$.html">scala.collection.JavaConversions</a> that contains many implicit conversion for Java collections.&#160; </p><br /><br /><p>Here is the Java version of Customers:</p><br /><br /><pre class="brush: java">package com.restfully.shop.domain;<br /><br />import javax.xml.bind.annotation.XmlElementRef;<br />import javax.xml.bind.annotation.XmlRootElement;<br />import javax.xml.bind.annotation.XmlTransient;<br />import java.util.ArrayList;<br />import java.util.Collection;<br />import java.util.List;<br /><br />/**<br /> * @author <a href="mailto:bill@burkecentral.com">Bill Burke</a><br /> * @version $Revision: 1 $<br /> */<br />@XmlRootElement(name = &quot;customers&quot;)<br />public class Customers<br />{<br />   protected Collection<customer> customers = new ArrayList<customer>();<br />   protected List<link /> links;<br /><br />   @XmlElementRef<br />   public Collection<customer> getCustomers()<br />   {<br />      return customers;<br />   }<br /><br />   public void setCustomers(Collection<customer> customers)<br />   {<br />      this.customers = customers;<br />   }<br /><br />   @XmlElementRef<br />   public List<link /> getLinks()<br />   {<br />      return links;<br />   }<br /><br />   public void setLinks(List<link /> links)<br />   {<br />      this.links = links;<br />   }<br /><br />   @XmlTransient<br />   public String getNext()<br />   {<br />      if (links == null) return null;<br />      for (Link link : links)<br />      {<br />         if (&quot;next&quot;.equals(link.getRelationship())) return link.getHref();<br />      }<br />      return null;<br />   }<br /><br />   @XmlTransient<br />   public String getPrevious()<br />   {<br />      if (links == null) return null;<br />      for (Link link : links)<br />      {<br />         if (&quot;previous&quot;.equals(link.getRelationship())) return link.getHref();<br />      }<br />      return null;<br />   }<br /><br />}</pre><br /><br /><p>Here is my Scala conversion of Customers:</p><br /><br /><pre class="brush: scala">package com.restfully.shop.domain<br /><br />import java.util.{ArrayList =&gt; JArrayList}<br />import java.util.{Collection =&gt; JCollection}<br />import java.util.{List =&gt; JList}<br /><br />import javax.xml.bind.annotation.XmlElementRef<br />import javax.xml.bind.annotation.XmlRootElement<br />import javax.xml.bind.annotation.XmlTransient<br />import javax.xml.bind.annotation.XmlAccessorType<br />import javax.xml.bind.annotation.XmlAccessType<br /><br />import scala.collection.Iterable<br />import scala.collection.JavaConversions._<br />import scala.collection.mutable.Buffer<br /><br />@XmlRootElement(name = &quot;customers&quot;)<br />@XmlAccessorType(XmlAccessType.PROPERTY)<br />class Customers {<br /><br />  var customers = Iterable[Customer]() <br />  var links: Buffer[Link] = Buffer()<br />  <br />  @XmlElementRef<br />  def getCustomers: JCollection[Customer] = customers<br />  def setCustomers(customers: JCollection[Customer]) = {<br />    this.customers = customers<br />  }<br /> <br />  @XmlElementRef<br />  def getLinks: JList[Link] = links<br />  def setLinks(links: JList[Link]) = {<br />    this.links = links<br />  }<br />  <br />  @XmlTransient<br />  def getNext(): String = findHref(&quot;next&quot;)<br /> <br />  @XmlTransient<br />  def getPrevious(): String = findHref(&quot;previous&quot;)<br />  <br />  private def findHref(rname: String): String = {<br />    val rel = links.filter(_.getRelationship == rname)<br />    rel match {<br />      case Buffer() =&gt; null<br />      case _        =&gt; rel.head.getHref<br />    }<br />  }<br />  <br />}</pre><br /><br /><p>That’s about as far as I got this weekend.&#160; I guess I was actually mostly working with JAXB this time.&#160; The same example code has JPA as was as JAX-RS, and I’m going to try and convert the entire project to Scala, and if I do, I’ll upload it to BitBucket.</p>  
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GWT 2.0 Ms1 With Ivy Dependency Resolution]]></title>
    <link href="http://mostlyblather.com/blog/2009/10/25/gwt-2.0-ms1-with-ivy-dependency-resolution/"/>
    <updated>2009-10-25T00:00:00-07:00</updated>
    <id>http://mostlyblather.com/blog/2009/10/25/gwt-2.0-ms1-with-ivy-dependency-resolution</id>
    <content type="html"><![CDATA[I decided to take a stab at finding out how hard it would be to integrate <a title="Ivy" href="http://ant.apache.org/ivy/" id="v8gb">Ivy</a> with a <a title="GWT" href="http://code.google.com/webtoolkit/" id="q68b">GWT</a> Ant build.<br /><br /><h4>Generate Project</h4>I started out by generating the GWT application with <a title="webAppCreator" href="http://code.google.com/webtoolkit/tutorials/1.6/create.html" id="e.8n">webAppCreator</a>.<br /><br /><blockquote>C:/Programs/gwt-2.0.0-ms1<span style="font-family:Courier New;">/webAppCreator com.mostlyblather.IvyGwt</span><br /><br /></blockquote><h4>Create Ivy Configuration</h4>Next I created the ivy.xml file.  After playing around with a couple of different configurations, I settled on this one.  Any future libraries added to the project would be either assigned to &#8220;compile&#8221; or &#8220;runtime&#8221; configurations.  The &#8220;compile&#8221; runtime would include things like 3rd party GWT libraries.  The &#8220;runtime&#8221; configuration would be used for dependencies executed in the Servlet container.<br /><br /><br /><i>ivy.xml file:</i><br /><br /><pre name="code" class="brush: xml"><br />&lt;ivy-module version=&quot;2.0&quot;&gt;<br />    &lt;info organisation=&quot;com.mostlyblather&quot; module=&quot;ivygwt&quot;/&gt;<br />    &lt;configurations&gt;<br />      &lt;conf name=&quot;runtime&quot;  description=&quot;needed in servlet container&quot;/&gt;<br />      &lt;conf name=&quot;compile&quot;  description=&quot;needed for compilation (other GWT libraries)&quot;/&gt;<br />      &lt;conf name=&quot;sdk&quot;  description=&quot;GWT SDK (compile time, seperated for Eclipse GWT IDE Integration)&quot;/&gt;        <br />    &lt;/configurations&gt;<br />    &lt;dependencies&gt;<br />      &lt;dependency org=&quot;com.google.gwt&quot; name=&quot;gwt-servlet&quot; rev=&quot;2.0.0-ms1&quot; conf=&quot;runtime-&gt;default&quot;/&gt;<br />      &lt;dependency org=&quot;com.google.gwt&quot; name=&quot;gwt-user&quot; rev=&quot;2.0.0-ms1&quot; conf=&quot;sdk-&gt;default&quot;/&gt;<br />      &lt;dependency org=&quot;com.google.gwt&quot; name=&quot;gwt-dev&quot; rev=&quot;2.0.0-ms1&quot; conf=&quot;sdk-&gt;default&quot;/&gt;<br />    &lt;/dependencies&gt;<br />&lt;/ivy-module&gt;<br /></pre><br /><h4>Modify Ant Build</h4>In order to use the Ivy resolved dependencies, several modifications to build.xml need to be made.<br /><br />First an <a title="automatic ivy installation" href="http://ant.apache.org/ivy/history/latest-milestone/install.html" id="uswj">automatic ivy installation</a> code section.<br /><br /><pre name="code" class="brush: xml"><br />  &lt;property name=&quot;ivy.install.version&quot; value=&quot;2.1.0&quot; /&gt;<br />  &lt;condition property=&quot;ivy.home&quot; value=&quot;${env.IVY_HOME}&quot;&gt;<br />    &lt;isset property=&quot;env.IVY_HOME&quot; /&gt;<br />  &lt;/condition&gt;<br />  &lt;property name=&quot;ivy.home&quot; value=&quot;${user.home}/.ant&quot; /&gt;<br />  &lt;property name=&quot;ivy.jar.dir&quot; value=&quot;${ivy.home}/lib&quot; /&gt;<br />  &lt;property name=&quot;ivy.jar.file&quot; value=&quot;${ivy.jar.dir}/ivy.jar&quot; /&gt;<br /><br />  &lt;target name=&quot;download-ivy&quot; unless=&quot;offline&quot;&gt;<br />    &lt;mkdir dir=&quot;${ivy.jar.dir}&quot;/&gt;<br />      &lt;!-- download Ivy from web site so that it can be used even without any special installation --&gt;<br />      &lt;get src=&quot;http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar&quot;<br />      dest=&quot;${ivy.jar.file}&quot; usetimestamp=&quot;true&quot;/&gt;<br />  &lt;/target&gt;<br /><br />  &lt;target name=&quot;init-ivy&quot; depends=&quot;download-ivy&quot;&gt;<br />    &lt;!-- try to load ivy here from ivy home, in case the user has not already dropped<br />         it into ant&apos;s lib dir (note that the latter copy will always take precedence).<br />         We will not fail as long as local lib dir exists (it may be empty) and<br />         ivy is in at least one of ant&apos;s lib dir or the local lib dir. --&gt;<br />    &lt;path id=&quot;ivy.lib.path&quot;&gt;<br />      &lt;fileset dir=&quot;${ivy.jar.dir}&quot; includes=&quot;*.jar&quot;/&gt;<br />    &lt;/path&gt;<br />    &lt;taskdef resource=&quot;org/apache/ivy/ant/antlib.xml&quot;<br />      uri=&quot;antlib:org.apache.ivy.ant&quot; classpathref=&quot;ivy.lib.path&quot;/&gt;<br />  &lt;/target&gt;<br /></pre>Next, add ivy to the build.xml xml namespace.<br /><br /><pre name="code" class="brush: xml"><br />&lt;project name="IvyGwt" xmlns:ivy="antlib:org.apache.ivy.ant" default="build" basedir="."&gt;<br /></pre><br /><br /><br />Create a new target named &#8220;resolve&#8221; to actually fetch the needed jars.<br /><br /><pre name="code" class="brush: xml">  <br />&lt;target name="resolve" depends="init-ivy" description="retrieve dependencies with ivy"&gt;<br /> &lt;ivy:retrieve pattern="${ivy.lib.dir}/[conf]/[artifact].[ext]"/&gt;<br />&lt;/target&gt;<br /></pre><br /><br />Additionally create a &#8220;resolve&#8221; target dependency to the &#8220;libs&#8221; target.<br /><br /><pre name="code" class="brush: xml">    <br />&lt;target name="libs" depends="resolve" description="Copy libs to WEB-INF/lib"&gt;<br /></pre><br /><br />The property definition &#8220;gwt.sdk&#8221; is no longer required so it can be removed.<br /><br />The &#8220;project.class.path&#8221; property has to be changed to pick up the new Ivy provided jars.<br /><br /><pre name="code" class="brush: xml"> <br />  &lt;path id=&quot;project.class.path&quot;&gt;<br />    &lt;pathelement location=&quot;war/WEB-INF/classes&quot;/&gt;<br />    &lt;fileset dir=&quot;lib/compile&quot; includes=&quot;**/*.jar&quot;/&gt;<br />    &lt;fileset dir=&quot;lib/sdk&quot; includes=&quot;**/*.jar&quot;/&gt;<br />  &lt;/path&gt;<br /></pre><br /><br />Target &#8220;libs&#8221; similarly needs to be updated.  Notice that it is only picking up the &#8220;runtime&#8221; configuration.<br /><br /><pre name="code" class="brush: xml"> <br />  &lt;target name=&quot;libs&quot; depends=&quot;resolve&quot; description=&quot;Copy libs to WEB-INF/lib&quot;&gt;<br />    &lt;mkdir dir=&quot;war/WEB-INF/lib&quot; /&gt;<br />    &lt;copy todir=&quot;war/WEB-INF/lib&quot; &gt;<br />          &lt;fileset dir=&quot;lib/runtime&quot; includes=&quot;**/*.jar&quot;/&gt;<br />      &lt;/copy&gt;<br />  &lt;/target&gt;<br /></pre><br /><br />The &#8220;clean&#8221; target has some additional work to do now.<br /><br /><pre name="code" class="brush: xml"> <br />  &lt;target name=&quot;clean&quot; description=&quot;Cleans this project&quot;&gt;<br />    &lt;delete dir=&quot;war/WEB-INF/classes&quot; failonerror=&quot;false&quot; /&gt;    <br />    &lt;delete dir=&quot;war/WEB-INF/lib&quot; failonerror=&quot;false&quot; /&gt;    <br />    &lt;delete dir=&quot;war/ivygwt&quot; failonerror=&quot;false&quot; /&gt;<br />    &lt;delete dir=&quot;lib&quot; failonerror=&quot;false&quot; /&gt;<br />  &lt;/target&gt;<br /></pre><br /><br /><i>Here is the final build.xml</i><br /><br /><pre name="code" class="brush: xml"> <br />&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;<br />&lt;project name=&quot;IvyGwt&quot; xmlns:ivy=&quot;antlib:org.apache.ivy.ant&quot; default=&quot;build&quot; basedir=&quot;.&quot;&gt;<br /><br />  &lt;path id=&quot;project.class.path&quot;&gt;<br />    &lt;pathelement location=&quot;war/WEB-INF/classes&quot;/&gt;<br />      &lt;fileset dir=&quot;lib/compile&quot; includes=&quot;**/*.jar&quot;/&gt;<br />      &lt;fileset dir=&quot;lib/sdk&quot; includes=&quot;**/*.jar&quot;/&gt;<br />  &lt;/path&gt;<br /><br />  &lt;property name=&quot;ivy.install.version&quot; value=&quot;2.1.0&quot; /&gt;<br />  &lt;condition property=&quot;ivy.home&quot; value=&quot;${env.IVY_HOME}&quot;&gt;<br />    &lt;isset property=&quot;env.IVY_HOME&quot; /&gt;<br />  &lt;/condition&gt;<br />  &lt;property name=&quot;ivy.home&quot; value=&quot;${user.home}/.ant&quot; /&gt;<br />  &lt;property name=&quot;ivy.jar.dir&quot; value=&quot;${ivy.home}/lib&quot; /&gt;<br />  &lt;property name=&quot;ivy.jar.file&quot; value=&quot;${ivy.jar.dir}/ivy.jar&quot; /&gt;<br /><br />  &lt;target name=&quot;download-ivy&quot; unless=&quot;offline&quot;&gt;<br />    &lt;mkdir dir=&quot;${ivy.jar.dir}&quot;/&gt;<br />      &lt;!-- download Ivy from web site so that it can be used even without any special installation --&gt;<br />      &lt;get src=&quot;http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar&quot;<br />      dest=&quot;${ivy.jar.file}&quot; usetimestamp=&quot;true&quot;/&gt;<br />  &lt;/target&gt;<br /><br />  &lt;target name=&quot;init-ivy&quot; depends=&quot;download-ivy&quot;&gt;<br />    &lt;!-- try to load ivy here from ivy home, in case the user has not already dropped<br />         it into ant&apos;s lib dir (note that the latter copy will always take precedence).<br />         We will not fail as long as local lib dir exists (it may be empty) and<br />         ivy is in at least one of ant&apos;s lib dir or the local lib dir. --&gt;<br />    &lt;path id=&quot;ivy.lib.path&quot;&gt;<br />      &lt;fileset dir=&quot;${ivy.jar.dir}&quot; includes=&quot;*.jar&quot;/&gt;<br />    &lt;/path&gt;<br />    &lt;taskdef resource=&quot;org/apache/ivy/ant/antlib.xml&quot;<br />      uri=&quot;antlib:org.apache.ivy.ant&quot; classpathref=&quot;ivy.lib.path&quot;/&gt;<br />  &lt;/target&gt;<br /> <br />  &lt;target name=&quot;resolve&quot; depends=&quot;init-ivy&quot; description=&quot;retrieve dependencies with ivy&quot;&gt;<br />    &lt;mkdir dir=&quot;lib/runtime&quot; /&gt;<br />    &lt;mkdir dir=&quot;lib/compile&quot; /&gt;<br />    &lt;mkdir dir=&quot;lib/sdk&quot; /&gt;<br />    &lt;ivy:retrieve pattern=&quot;${ivy.lib.dir}/[conf]/[artifact].[ext]&quot;/&gt;<br />  &lt;/target&gt;<br /> <br />  &lt;target name=&quot;libs&quot; depends=&quot;resolve&quot; description=&quot;Copy libs to WEB-INF/lib&quot;&gt;<br />    &lt;mkdir dir=&quot;war/WEB-INF/lib&quot; /&gt;<br />    &lt;copy todir=&quot;war/WEB-INF/lib&quot; &gt;<br />          &lt;fileset dir=&quot;lib/runtime&quot; includes=&quot;**/*.jar&quot;/&gt;<br />      &lt;/copy&gt;<br />  &lt;/target&gt;<br /><br />  &lt;target name=&quot;javac&quot; depends=&quot;libs&quot; description=&quot;Compile java source&quot;&gt;<br />    &lt;mkdir dir=&quot;war/WEB-INF/classes&quot;/&gt;<br />    &lt;javac srcdir=&quot;src&quot; includes=&quot;**&quot; encoding=&quot;utf-8&quot;<br />        destdir=&quot;war/WEB-INF/classes&quot;<br />        source=&quot;1.5&quot; target=&quot;1.5&quot; nowarn=&quot;true&quot;<br />        debug=&quot;true&quot; debuglevel=&quot;lines,vars,source&quot;&gt;<br />      &lt;classpath refid=&quot;project.class.path&quot;/&gt;<br />    &lt;/javac&gt;<br />    &lt;copy todir=&quot;war/WEB-INF/classes&quot;&gt;<br />      &lt;fileset dir=&quot;src&quot; excludes=&quot;**/*.java&quot;/&gt;<br />    &lt;/copy&gt;<br />  &lt;/target&gt;<br /><br />  &lt;target name=&quot;gwtc&quot; depends=&quot;javac&quot; description=&quot;GWT compile to JavaScript&quot;&gt;<br />    &lt;java failonerror=&quot;true&quot; fork=&quot;true&quot; classname=&quot;com.google.gwt.dev.Compiler&quot;&gt;<br />      &lt;classpath&gt;<br />        &lt;pathelement location=&quot;src&quot;/&gt;<br />        &lt;path refid=&quot;project.class.path&quot;/&gt;<br />      &lt;/classpath&gt;<br />      &lt;!-- add jvmarg -Xss16M or similar if you see a StackOverflowError --&gt;<br />      &lt;jvmarg value=&quot;-Xmx256M&quot;/&gt;<br />      &lt;!-- Additional arguments like -style PRETTY or -logLevel DEBUG --&gt;<br />      &lt;arg value=&quot;com.mostlyblather.IvyGwt&quot;/&gt;<br />    &lt;/java&gt;<br />  &lt;/target&gt;<br /><br />  &lt;target name=&quot;hosted&quot; depends=&quot;javac&quot; description=&quot;Run hosted mode&quot;&gt;<br />    &lt;java failonerror=&quot;true&quot; fork=&quot;true&quot; classname=&quot;com.google.gwt.dev.HostedMode&quot;&gt;<br />      &lt;classpath&gt;<br />        &lt;pathelement location=&quot;src&quot;/&gt;<br />        &lt;path refid=&quot;project.class.path&quot;/&gt;<br />      &lt;/classpath&gt;<br />      &lt;jvmarg value=&quot;-Xmx256M&quot;/&gt;<br />      &lt;arg value=&quot;-startupUrl&quot;/&gt;<br />      &lt;arg value=&quot;IvyGwt.html&quot;/&gt;<br />      &lt;!-- Additional arguments like -style PRETTY or -logLevel DEBUG --&gt;<br />      &lt;arg value=&quot;com.mostlyblather.IvyGwt&quot;/&gt;<br />    &lt;/java&gt;<br />  &lt;/target&gt;<br /><br />  &lt;target name=&quot;build&quot; depends=&quot;gwtc&quot; description=&quot;Build this project&quot; /&gt;<br /><br />  &lt;target name=&quot;war&quot; depends=&quot;build&quot; description=&quot;Create a war file&quot;&gt;<br />    &lt;zip destfile=&quot;IvyGwt.war&quot; basedir=&quot;war&quot;/&gt;<br />  &lt;/target&gt;<br /><br />  &lt;target name=&quot;clean&quot; description=&quot;Cleans this project&quot;&gt;<br />    &lt;delete dir=&quot;war/WEB-INF/classes&quot; failonerror=&quot;false&quot; /&gt;    <br />    &lt;delete dir=&quot;war/WEB-INF/lib&quot; failonerror=&quot;false&quot; /&gt;    <br />    &lt;delete dir=&quot;war/ivygwt&quot; failonerror=&quot;false&quot; /&gt;<br />    &lt;delete dir=&quot;lib&quot; failonerror=&quot;false&quot; /&gt;<br />  &lt;/target&gt;<br /><br />&lt;/project&gt;<br /></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Install Instructions for Latest Mercurial (1.3.1) on Ubuntu (9.04 Jaunty Jackalope)]]></title>
    <link href="http://mostlyblather.com/blog/2009/09/29/quick-install-instructions-for-latest-mercurial-(1.3.1)-on-ubuntu-(9.04-jaunty-jackalope)/"/>
    <updated>2009-09-29T00:00:00-07:00</updated>
    <id>http://mostlyblather.com/blog/2009/09/29/quick-install-instructions-for-latest-mercurial-(1.3.1)-on-ubuntu-(9.04-jaunty-jackalope)</id>
    <content type="html"><![CDATA[<pre><br />sudo apt-get install build-essential gcc python-dev python-setuptools<br />sudo easy_install -U mercurial<br /></pre>
]]></content>
  </entry>
  
</feed>
